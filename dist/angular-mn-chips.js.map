{"version":3,"sources":["mn-option/mn-option.directive.js","app.js"],"names":["mnChipsDirective","$parse","$timeout","controller","$scope","$element","$attrs","name","attr","ngModel","split","length","find","link","scope","element","attributes","applyNgModel","option","querySelector","getAttribute","setAttribute","assign","value","$apply","modelValue","angular","equals","on","dirtyInput","dirtyValues","removeChild","restrict","require","module","$inject","directive"],"mappings":"YAIA,SAASA,kBAAiBC,OAAQC,UAQhC,QAASC,YAAWC,OAAQC,SAAUC,QACpC,GAAMC,MAAOF,SAASG,KAAK,SACtBF,OAAOG,QAAQC,MAAM,KAAKJ,OAAOG,QAAQC,MAAM,KAAKC,OAAS,EAElEN,UAASG,KAAK,OAAQD,MACtBF,SAASO,KAAK,SAASJ,KAAK,OAAQD,MAGtC,QAASM,MAAKC,MAAOC,QAASC,YAe5B,QAASC,gBACPf,SAAS,WAEP,GAAMgB,QAASH,QAAQ,GAAGI,cAAc,wBAClCZ,KAAOQ,QAAQ,GAAGK,aAAa,OACjCF,SACFA,OAAOG,aAAa,OAAQd,MAE9BN,OAAOe,WAAWP,SAASa,OAAOR,MAAOC,QAAQ,GAAGQ,OACpDT,MAAMU,UAAL,GAvBL,GAAMC,YAAaxB,OAAOe,WAAWP,SAASK,MACzBY,SAAQC,OAAOZ,QAAQ,GAAGQ,MAAOE,cAGpDV,QAAQ,GAAGQ,MAAQE,WACnBR,gBAOFF,QAAQa,GAAG,SAAU,WAAA,MAAAX,iBAerB,IAAMY,YAAad,QAAQ,GAAGI,cAAc,iBACtCW,YAAcf,QAAQ,GAAGI,cAAc,oBACzCU,aACFd,QAAQ,GAAGgB,YAAYF,YAErBC,aACFf,QAAQ,GAAGgB,YAAYhB,QAAQ,GAAGI,cAAc,YAjDpD,OACEa,SAAU,IACV7B,WAAAA,WACAU,KAAAA,KACAoB,QAAS,WCTbP,QAAQQ,OAAO,eDCflC,iBAAiBmC,SAAW,SAAU,YADtCT,QACGQ,OAAO,YACPE,UAAU,UAAWpC","file":"angular-mn-chips.js","sourcesContent":["angular\n  .module('mn-chips')\n  .directive('mnChips', mnChipsDirective)\n\nfunction mnChipsDirective($parse, $timeout) {\n  return {\n    restrict: 'E',\n    controller,\n    link,\n    require: 'ngModel',\n  }\n\n  function controller($scope, $element, $attrs) {\n    const name = $element.attr('name')\n      || $attrs.ngModel.split('.')[$attrs.ngModel.split('.').length - 1]\n\n    $element.attr('name', name)\n    $element.find('input').attr('name', name)\n  }\n\n  function link(scope, element, attributes) {\n    const modelValue = $parse(attributes.ngModel)(scope)\n    const modelApplied = angular.equals(element[0].value, modelValue)\n\n    if (!modelApplied) {\n      element[0].value = modelValue\n      applyNgModel()\n    }\n\n    // scope.$watchCollection(() => ngModel.$modelValue, value => {\n    //   console.log(value)\n    // })\n\n    element.on('change', () => applyNgModel())\n\n    function applyNgModel() {\n      $timeout(() => {\n        const option = element[0].querySelector('mn-option:last-child')\n        const name = element[0].getAttribute('name')\n        if (option) {\n          option.setAttribute('name', name)\n        }\n        $parse(attributes.ngModel).assign(scope, element[0].value)\n        scope.$apply()\n      }, 0)\n    }\n\n    // to allow ngRepeat\n    const dirtyInput = element[0].querySelector('input + input')\n    const dirtyValues = element[0].querySelector('.values + .values')\n    if (dirtyInput) {\n      element[0].removeChild(dirtyInput)\n    }\n    if (dirtyValues) {\n      element[0].removeChild(element[0].querySelector('.values'))\n    }\n  }\n}\n","angular.module('mn-chips', [])\n"]}